{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Production deploy of Sample Transport Tracking",

  "Parameters": {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance.  If you don't have one, create one first.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    },    
    "AdminEmail": {
      "Description" : "Administrator email address",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100",
      "AllowedPattern": "^\\S+@\\S+$",
      "ConstraintDescription" : "Must be a valid email address (e.g., example@example.com)"
    },
    "DBUser": {
      "Description" : "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters (min 1, max 16)."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "ConstraintDescription" : "Must contain only alphanumeric characters (min 8, max 41)."
    },
    "STTUser": {
      "Description" : "The STT dashboard admin account username",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "255"
    },
    "STTPassword": {
      "NoEcho": "true",
      "Description" : "The STT dashboard admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41"
    },
    "TLDomain": {
      "Description" : "The top level domain name for all local services",
      "Type": "String",
      "ConstraintDescription" : "e.g., kharasta.com"
    },
    "ODKUser": {
      "Description" : "ODK submissions from STT account username",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "255"
    },
    "ODKPassword": {
      "NoEcho": "true",
      "Description" : "ODK submissions from STT account password",
      "Type": "String",
      "MinLength": "8"
    },
    "Test": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "Description": "Enable test mode"
    },
    "BuildVersion": {
      "Type": "String",
      "Default": "latest",
      "AllowedValues": ["latest", "staging", "testing"],
      "Description": "STT application build (hub.docker.com/r/kharatsa/strack)"
    },
    "DBInstanceType": {
      "Type" : "String",
      "Default" : "db.t2.micro",
      "AllowedValues" : ["db.t2.micro",  "db.t2.small", "db.t2.medium", "db.t2.large"],
      "Description" : "Enter database instance class. Default is db.t2.micro."
    },
    "DBStorageGB": {
      "Type" : "Number",
      "Default" : "5",
      "MinValue" : "5",
      "MaxValue" : "100",
      "Description" : "Database storage initial allocation in GB. Default is 5."
    },
    "ServerInstanceType": {
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.micro", "t2.small", "t2.medium", "t2.large"],
      "Description" : "Enter server instance class. Default is t2.micro."
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Amazon RDS Configuration" },
          "Parameters" : [ "DBUser", "DBPassword", "DBInstanceType", "DBStorageGB" ]
        },
        {
          "Label" : { "default":"Amazon EC2 Configuration" },
          "Parameters" : [ "AdminEmail", "TLDomain", "KeyName", "ServerInstanceType" ]
        },
        {
          "Label" : { "default" : "Sample Transport Tracking (STT) Dashboard Configuration" },
          "Parameters" : [ "STTUser", "STTPassword", "Test", "BuildVersion" ]
        },
        {
          "Label" : { "default" : "ODK Aggregate Configuration" },
          "Parameters" : [ "ODKUser", "ODKPassword" ]
        }
      ]
    }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "64" : "ami-40d28157" },
      "us-west-1"      : { "64" : "ami-6e165d0e" },
      "eu-west-1"      : { "64" : "ami-0d77397e" },
      "ap-southeast-1" : { "64" : "ami-a1288ec2" },
      "ap-northeast-1" : { "64" : "ami-0567c164" }
    }
  },

  "Resources" : {
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "3306", 
          "ToPort" : "3306",
          "SourceSecurityGroupName" : { "Ref" : "InstanceSecurityGroup" }
        }]
      }
    },
    "MainDB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBName" : "odk_stt",
        "AllocatedStorage" : { "Ref": "DBStorageGB" },
        "DBInstanceClass" : { "Ref": "DBInstanceType" },
        "Engine" : "MySQL",
        "EngineVersion" : "5.7",
        "MasterUsername" : { "Ref" : "DBUser" },
        "MasterUserPassword" : { "Ref" : "DBPassword" },
				"VPCSecurityGroups" : [{ "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] }]
      }
    },
		"Ec2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "64"]},
        "KeyName" : { "Ref" : "KeyName" },
				"InstanceType" : { "Ref": "ServerInstanceType" },
				"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "Tags": [{
          "Key" : "Name",
          "Value" : "STT server"
        }],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
					"#!/bin/bash -ex\n",
          "echo \"",
          "MYSQL_USER=", { "Ref" : "DBUser"}, "\n",
          "MYSQL_DATABASE=", "odk_stt", "\n",
          "MYSQL_PASSWORD=", { "Ref" : "DBPassword"}, "\n",
          "MYSQL_HOSTNAME=", { "Fn::GetAtt": [ "MainDB", "Endpoint.Address" ] }, "\n",
          "STT_DB_USER=", { "Ref" : "DBUser"}, "\n",
          "STT_DB_PASSWORD=", { "Ref" : "DBPassword" }, "\n",
          "STT_DB_NAME=stt\n",
          "STT_DB_HOST=", { "Fn::GetAtt": [ "MainDB", "Endpoint.Address" ] }, "\n",
          "STT_DB_PORT=", { "Fn::GetAtt": [ "MainDB", "Endpoint.Port" ] }, "\n",
          "STT_USER=", { "Ref" : "STTUser" }, "\n",
          "STT_PASSWORD=", { "Ref" : "STTPassword" }, "\n",
          "ODK_USERNAME=", { "Ref" : "ODKUser" }, "\n",
          "ODK_PASSWORD=", { "Ref" : "ODKPassword" }, "\n",
          "TL_HOSTNAME=", { "Ref" : "TLDomain" }, "\n",
          "EMAIL_ADDRESS=", { "Ref" : "AdminEmail" }, "\n",
          "TEST=", { "Ref" : "Test" },
          "\" > /etc/stt_creds\n",
          "if [ ", { "Ref" : "Test" }, " = \"true\" ]; then echo \"NODE_ENV=development\nLETSENCRYPT_TEST=True\"; else echo \"NODE_ENV=production\nLETSENCRYPT_TEST=False\"; fi >> /etc/stt_creds\n",
          "cat \"/etc/stt_creds\" | while read line; do echo \"export $line\"; done; >> /home/ubuntu/.bashrc\n",
          "apt-get -yq install apt-transport-https ca-certificates\n",
          "apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
          "echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" | tee /etc/apt/sources.list.d/docker.list\n",
          "apt-get update\n",
          "apt-get -yq install linux-image-extra-$(uname -r) linux-image-extra-virtual docker-engine mysql-client-core-5.7 nginx letsencrypt gettext\n",
          "adduser --no-create-home --group letsencrypt\n",
          "chgrp letsencrypt $(which letsencrypt)\n",
          "addgroup --gid 8888 stt\n",
          "adduser --no-create-home --gid 8888 --uid 8888 stt\n",
          "usermod -aG letsencrypt,docker,stt ubuntu\n",
          "service docker start\n",
          "curl -L https://github.com/docker/compose/releases/download/1.9.0-rc2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n",
          "chmod +x /usr/local/bin/docker-compose"
				]]}}
      }
    },
    "InstanceSecurityGroup" : {
       "Type" : "AWS::EC2::SecurityGroup",
       "Properties" : {
          "GroupDescription" : "Allow http to client host",
          "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp",
                "FromPort" : "80",
                "ToPort" : "80",
                "CidrIp" : "0.0.0.0/0"
             },{
                "IpProtocol" : "tcp",
                "FromPort" : "443",
                "ToPort" : "443",
                "CidrIp" : "0.0.0.0/0"
             },{
                "IpProtocol" : "tcp",
                "FromPort" : "22",
                "ToPort" : "22",
                "CidrIp" : "0.0.0.0/0"
             }]
       }
    },
    "MyEIP" : {
     "Type" : "AWS::EC2::EIP",
     "Properties" : {
         "InstanceId" : { "Ref" : "Ec2Instance" }
     }
    }
  },

  "Outputs" : {
    "JDBCConnectionString": {
      "Description" : "JDBC connection string for the database",
      "Value" : { "Fn::Join": [ "", [ "jdbc:mysql://",
                                      { "Fn::GetAtt": [ "MainDB", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "MainDB", "Endpoint.Port" ] },
                                      "/",
                                      "odk_stt"]]}
    }
  }
}

